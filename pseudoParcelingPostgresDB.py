import psycopg2



conn = psycopg2.connect("dbname=noss user=Tsengineer password=Forec@st02")
cursor = conn.cursor()

def getFourPointsFromPolygonGeom(polygonGeom):
    query = "select st_ymin(st_geomfromtext(st_astext('" + polygonGeom + "')))"
    cursor.execute(query)
    fetch = cursor.fetchall()
    ymin = fetch[0][0]

    query = "select st_ymax(st_geomfromtext(st_astext('" + polygonGeom + "')))"
    cursor.execute(query)
    fetch = cursor.fetchall()
    ymax = fetch[0][0]

    query = "select st_xmin(st_geomfromtext(st_astext('" + polygonGeom + "')))"
    cursor.execute(query)
    fetch = cursor.fetchall()
    xmin = fetch[0][0]

    query = "select st_xmax(st_geomfromtext(st_astext('" + polygonGeom + "')))"
    cursor.execute(query)
    fetch = cursor.fetchall()
    xmax = fetch[0][0]


    return (xmin,xmax,ymin,ymax)
def getAreaFromPolygonGeom(polygonGeom):
    query = "select st_area('" + polygonGeom + "')"
    cursor.execute(query)
    fetch = cursor.fetchall()[0][0]
    return fetch
def makeALine(x1,y1,x2,y2):
    query = "select st_astext(st_makeline(st_makepoint("+x1+","+y1+"),st_makepoint("+x2+","+y2+")))"
    cursor.execute(query)
    fetch = cursor.fetchall()
    line_geom = fetch[0][0]
    return line_geom
def splitPolygon(polygonGeom,lineGeom,type):
    query = "select ST_GeometryType('"+polygonGeom+"')"
    cursor.execute(query)
    fetch = cursor.fetchall()
    polygonType = fetch[0][0]
    query = ''

    query = "select ST_AsText((st_dump(st_split(st_geomfromtext(st_astext('" + polygonGeom + "')),'" + lineGeom + "'))).geom)"
    cursor.execute(query)
    fetch = cursor.fetchall()
    if len(fetch)==1:
        return fetch[0][0],None
    elif len(fetch)>2:

        if type == 'h':
            collection0 = None
            collection1 = None
            query = "select st_x(ST_StartPoint('" + lineGeom + "'::geometry))"
            cursor.execute(query)
            linex = cursor.fetchall()[0][0]
            for i in range(len(fetch)):
                xmini, xmaxi, ymini, ymaxi = getFourPointsFromPolygonGeom(fetch[i][0])
                if xmaxi <= linex:
                    if collection0 == None:
                        collection0 = fetch[i][0]
                    else:
                        query = "select st_collect('"+collection0+"','"+fetch[i][0]+"');"
                        cursor.execute(query)
                        collection0 = cursor.fetchall()[0][0]

                elif xmini >= linex:
                    if collection1 == None:
                        collection1 = fetch[i][0]
                    else:
                        query = "select st_collect('"+collection1+"','"+fetch[i][0]+"');"
                        cursor.execute(query)
                        collection1 = cursor.fetchall()[0][0]

            return collection0,collection1
        else:

            collection0 = None
            collection1 = None
            query = "select st_y(ST_StartPoint('" + lineGeom + "'::geometry))"
            cursor.execute(query)
            liney = cursor.fetchall()[0][0]
            for i in range(len(fetch)):
                xmini, xmaxi, ymini, ymaxi = getFourPointsFromPolygonGeom(fetch[i][0])
                if ymini >= liney:
                    if collection0 == None:
                        collection0 = fetch[i][0]
                    else:
                        query = "select st_collect('" + collection0 + "','"+fetch[i][0]+"');"
                        cursor.execute(query)
                        collection0 = cursor.fetchall()[0][0]

                elif ymaxi <= liney:
                    if collection1 == None:
                        collection1 = fetch[i][0]
                    else:
                        query = "select st_collect('" + collection1 + "','"+fetch[i][0]+"');"
                        cursor.execute(query)
                        collection1 = cursor.fetchall()[0][0]

            return collection0, collection1


    parcel0 = fetch[0][0]
    parcel1 = fetch[1][0]
    xmin0, xmax0, ymin0, ymax0 = getFourPointsFromPolygonGeom(parcel0)
    xmin1, xmax1, ymin1, ymax1 = getFourPointsFromPolygonGeom(parcel1)

    if type == 'h': #split horizontally

        if xmin0>xmin1:
            return parcel1,parcel0
        else: #split vertically
            return parcel0,parcel1
    else:

        if ymin0>ymin1:
            return parcel0,parcel1
        else:
            return parcel1,parcel0

def adjustYSplit(currentParcel,remainingParcel, currentBigArea,supposedArea,currentLine,tol,ystep,ymin,ymax):
    currentParcelArea = getAreaFromPolygonGeom(currentParcel)

    if abs(currentParcelArea - supposedArea) <= tol:
        pass
    elif currentParcelArea - supposedArea > 0:
        while abs(currentParcelArea - supposedArea) > tol and (currentParcelArea - supposedArea) > 0:
            query = "select st_x(ST_StartPoint('" + currentLine + "'::geometry))"
            cursor.execute(query)
            fetch = cursor.fetchall()
            currentX = fetch[0][0]
            currentX -= ystep

            currentLine = makeALine(str(currentX),str(ymin),str(currentX),str(ymax))
            currentParcel,remainingParcel = splitPolygon(currentBigArea,currentLine,'h')

            currentParcelArea = getAreaFromPolygonGeom(currentParcel)
    else:  # too small, move left
        while abs(currentParcelArea - supposedArea)> tol and (currentParcelArea - supposedArea) < 0:
            query = "select st_x(ST_StartPoint('" + currentLine + "'::geometry))"
            cursor.execute(query)
            fetch = cursor.fetchall()
            currentX = fetch[0][0]
            currentX += ystep

            currentLine = makeALine(str(currentX), str(ymin), str(currentX), str(ymax))
            currentParcel,remainingParcel = splitPolygon(currentBigArea, currentLine, 'h')

            currentParcelArea = getAreaFromPolygonGeom(currentParcel)

    return currentParcel,remainingParcel


def adjustXSplit(currentParcel,remainingParcel,currentBigArea,supposedArea,currentLine,tol,xstep,xmin,xmax):
    currentParcelArea = getAreaFromPolygonGeom(currentParcel)
    if abs(currentParcelArea - supposedArea) <= tol:
        pass
    elif currentParcelArea - supposedArea > 0:
        while abs(currentParcelArea - supposedArea) > tol and (currentParcelArea - supposedArea) > 0:
            query = "select st_y(ST_StartPoint('" + currentLine + "'::geometry))"
            cursor.execute(query)
            fetch = cursor.fetchall()
            currentY = fetch[0][0]
            currentY += xstep
            currentLine = makeALine(str(xmin),str(currentY),str(xmax),str(currentY))
            currentParcel,remainingParcel = splitPolygon(currentBigArea,currentLine,'v')
            currentParcelArea = getAreaFromPolygonGeom(currentParcel)
    else:  # too small, move left
        while abs(currentParcelArea - supposedArea) > tol and (currentParcelArea - supposedArea) < 0:
            query = "select st_y(ST_StartPoint('" + currentLine + "'::geometry))"
            cursor.execute(query)
            fetch = cursor.fetchall()
            currentY = fetch[0][0]
            currentY -= xstep

            currentLine = makeALine(str(xmin),str(currentY),str(xmax),str(currentY))
            currentParcel,remainingParcel = splitPolygon(currentBigArea, currentLine, 'V')

            currentParcelArea = getAreaFromPolygonGeom(currentParcel)
    return currentParcel,remainingParcel

def cleanAPolygon(polygonGeom):
    query="SELECT (ST_DUMP('"+polygonGeom+"')).geom"
    cursor.execute(query)
    fetch = cursor.fetchall()
    biggestParcelArea = 0.0
    biggestParcel = None
    for i in range(len(fetch)):
        currentArea = getAreaFromPolygonGeom(fetch[i][0])
        if currentArea> biggestParcelArea:
            biggestParcelArea = currentArea
            biggestParcel = fetch[i][0]

    return biggestParcel
if __name__ == '__main__':
    testgeom
    # testgeom

    cells_y = 25
    cells_x = 10
    index = 0
    testgeom = cleanAPolygon(testgeom)
    print(testgeom)

    xmin,xmax,ymin,ymax = getFourPointsFromPolygonGeom(testgeom)
    yaverageArea = getAreaFromPolygonGeom(testgeom)/cells_x
    xaverageArea = yaverageArea/cells_y

    ytol = yaverageArea/500
    xtol = xaverageArea/500

    print('yaverage',yaverageArea)
    print('xaverageArea',xaverageArea)
    yBigParcel = testgeom
    xBigParcel = None

    width = xmax-xmin
    length = ymax-ymin

    dx = width/cells_x
    dy = length/cells_y

    ystep = dy/500
    xstep = dx/500


    X = xmin


    for j in range(cells_x):
        if j == cells_x-1:
            VerticalParcel = yBigParcel
            xBigParcel = VerticalParcel
            yBigParcel = None
        else:
            X = X+dx
            line_geom = makeALine(str(X),str(ymin),str(X),str(ymax))
            VerticalParcel,remainingParcel = splitPolygon(yBigParcel,line_geom,'h')
            VerticalParcelArea = getAreaFromPolygonGeom(VerticalParcel)
            VerticalParcel,yBigParcel = adjustYSplit(VerticalParcel,remainingParcel,yBigParcel,yaverageArea,line_geom,ytol,ystep,ymin,ymax)#update parcels
            xBigParcel = VerticalParcel
        print(getAreaFromPolygonGeom(VerticalParcel))


        query = "INSERT INTO public.splitp(cell_id, geom) VALUES ("+str(index+999)+",'"+VerticalParcel+"');"
        cursor.execute(query)
        conn.commit()

        for i in range(cells_y):
            if i==cells_y-1:
                HorizentalParcel = xBigParcel
                query = "INSERT INTO public.splitp(cell_id, geom) VALUES ("+str(index)+",'"+HorizentalParcel+"');"
                cursor.execute(query)
                conn.commit()
                print(getAreaFromPolygonGeom(HorizentalParcel))
            else:
                nowXmin, nowXmax, nowYmin, nowYmax = getFourPointsFromPolygonGeom(xBigParcel)
                nowdy = (nowYmax - nowYmin) / (cells_y-i)
                horizental_line_geom = makeALine(str(nowXmin),str(float(nowYmax)-nowdy),str(nowXmax),str(float(nowYmax)-nowdy))
                HorizentalParcel,remainingParcel = splitPolygon(xBigParcel,horizental_line_geom,'v')
                HorizentalParcelArea = getAreaFromPolygonGeom(HorizentalParcel)
                HorizentalParcel,xBigParcel = adjustXSplit(HorizentalParcel,remainingParcel,xBigParcel,xaverageArea,horizental_line_geom,xtol,xstep,xmin,xmax)
                HorizentalParcelArea = getAreaFromPolygonGeom(HorizentalParcel)
                query = "INSERT INTO public.splitp(cell_id, geom) VALUES ("+str(index)+",'"+HorizentalParcel+"');"
                cursor.execute(query)
                conn.commit()
                print(HorizentalParcelArea)

            i+=1
            index+=1
            print(index)

        j+=1
